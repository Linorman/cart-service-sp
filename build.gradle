plugins {
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
}

group = 'cartservice'
version = '0.0.1-SNAPSHOT'

def grpcVersion = "1.64.0"
def protocVersion = "3.25.3"

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencyManagement {
    imports {
        mavenBom 'com.google.cloud:libraries-bom:26.40.0'
    }
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation "com.google.api.grpc:proto-google-common-protos:2.39.1",
                "javax.annotation:javax.annotation-api:1.3.2",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty-shaded:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "io.grpc:grpc-census:${grpcVersion}",
                "com.google.protobuf:protobuf-java:${protocVersion}",
                'redis.clients:jedis',
                'org.springframework.boot:spring-boot-starter-data-redis',
                'org.springframework.boot:spring-boot-starter-web',
                'com.google.cloud:google-cloud-secretmanager',
                'com.google.cloud:google-cloud-spanner'


        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.22.0'
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
}

task cartService(type: CreateStartScripts) {
    mainClass.set('com.example.cartservicesp.CartserviceSpApplication')
    applicationName = 'CartService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}


application {
    mainClassName = 'com.example.cartservicesp.CartserviceSpApplication'
}


applicationDistribution.into('bin') {
    from(cartService)
    fileMode = 0755
}
